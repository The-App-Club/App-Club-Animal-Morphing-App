import {css} from '@emotion/css';
import {useRef, useEffect, useState, useCallback} from 'react';
import {transform} from 'framer-motion';
import * as d3 from 'd3';
import {useResizeObserver} from '../hooks/useResizeObserver';
import {interpolatePath} from 'd3-interpolate-path';

const width = 500;
const height = 650;

const data = {
  a: `M 139.574 52.13 C 127.11 52.13 137.535 63.137 131.726 68.946 C 126.716 73.957 124.687 77.791 117.713 81.278 C 112.511 83.879 106.872 82.494 101.457 85.202 C 97.571 87.145 90.539 83.788 87.444 86.883 C 86.088 88.24 81.902 86.82 80.717 88.004 C 78.748 89.974 74.897 93.265 72.87 95.291 C 71.14 97.022 65.877 103.166 68.386 108.184 C 73.542 118.497 75.505 132.119 84.081 140.695 C 86.66 143.275 91.225 140.904 94.17 142.377 C 111.385 150.984 123.527 129.308 144.058 139.574 C 149.809 142.45 153.231 155.677 155.83 160.874 C 158.649 166.514 158.445 178.251 156.39 184.417 C 153.822 192.121 153.875 213.306 156.39 220.852 C 157.513 224.222 155.828 228.694 156.951 232.063 C 162.872 249.827 159.444 270.372 165.359 288.117 C 167.501 294.542 169.991 303.399 173.767 307.175 C 175.989 309.397 175.273 316.003 176.009 318.946 C 178.481 328.835 181.748 338.967 184.978 348.655 C 186.341 352.746 184.566 358.446 183.296 360.987 C 181.664 364.25 182.683 368.938 181.054 372.197 C 178.107 378.091 172.722 381.651 168.722 385.65 C 166.77 387.602 166.627 391.463 164.798 392.377 C 159.71 394.921 159.647 409.087 163.117 412.556 C 165.582 415.021 170.972 413.12 174.327 414.798 C 179.919 417.594 198.361 418.476 204.596 415.359 C 207.591 413.861 203.743 404.734 205.157 401.906 C 207.945 396.33 217.142 395.312 219.731 390.135 C 219.908 389.781 223.798 384.39 224.215 384.529 C 225.554 384.975 226.327 386.341 227.578 385.09 C 230.195 382.474 231.083 379.201 233.184 375 C 241.4 358.568 221.973 344.873 221.973 330.157 C 221.973 319.753 223.595 312.9 227.578 304.933 C 228.686 302.719 229.383 298.425 230.942 297.646 C 233.267 296.483 234.368 289.55 239.35 292.04 C 243.719 294.225 244.127 297.378 247.758 301.009 C 252.992 306.243 265.034 305.393 269.619 309.978 C 270.358 310.717 275.745 309.978 276.906 309.978 C 280.807 309.978 294.224 308.547 298.206 310.538 C 300.332 311.601 300.168 314.462 301.009 316.144 C 305.247 324.619 296.237 337.989 301.009 347.534 C 307.655 360.826 323.197 364.677 331.839 373.318 C 332.527 374.007 332.062 376.23 332.399 377.242 C 336.967 390.946 325.239 392.25 318.946 398.543 C 318.227 399.262 316.056 406.864 317.265 408.072 C 319.478 410.285 331.29 408.632 335.202 408.632 C 352.387 408.632 377.289 411.412 389.574 405.269 C 390.639 404.736 389.936 402.665 390.695 401.906 C 395.836 396.764 392.961 387.868 397.982 382.848 C 405.957 374.873 425.861 383.045 432.735 373.879 C 437.713 367.242 440.449 350.444 442.265 341.368 C 443.434 335.523 445.451 329.565 447.309 323.991 C 449.026 318.842 447.348 312.59 448.431 307.175 C 451.28 292.927 451.794 278.259 451.794 263.453 C 451.794 251.546 448.83 242.631 446.188 232.063 C 445.698 230.103 445.361 226.19 443.946 224.776 C 434.458 215.287 424.024 210.05 411.996 204.036 C 405.03 200.553 388.683 207.169 385.09 210.762 C 382.837 213.016 379.771 212.417 378.924 215.807 C 378.605 217.081 375.731 225.507 377.242 227.018 C 379.463 229.239 385.449 226.256 387.332 228.139 C 389.309 230.116 393.008 231.012 395.179 233.184 C 409.691 247.696 415.919 270.966 415.919 290.919 C 415.919 310.341 404.109 320.367 389.013 327.915 C 385.586 329.629 373.984 336.428 369.955 332.399 C 365.678 328.122 364.503 322.056 361.547 316.144 C 358.856 310.762 364.238 301.345 361.547 295.964 C 359.902 292.673 362.6 287.419 360.987 284.193 C 358.457 279.133 362.335 271.195 359.865 266.256 C 357.984 262.492 359.305 254.912 359.305 250.561 C 359.305 239.169 360.153 222.549 355.381 213.005 C 351.188 204.618 347.429 195.973 341.368 188.901 C 331.369 177.236 317.68 170.819 307.735 160.874 C 299.578 152.717 294.51 147.032 285.314 140.135 C 279.985 136.138 270.546 134.896 266.256 130.605 C 261.581 125.931 252.82 120.524 246.076 117.152 C 240.95 114.59 238.747 105.899 234.865 102.018 C 228.281 95.433 217.455 88.497 213.565 80.717 C 211.439 76.465 205.033 74.863 202.915 70.628 C 201.884 68.566 199.191 65.783 197.87 64.462 C 195.177 61.769 195.275 55.701 192.825 53.251 C 187.569 47.995 177.455 46.446 169.283 43.722 C 166.19 42.691 159.012 43.541 156.951 41.48 C 156.092 40.622 146.131 41.089 145.179 42.04 C 142.232 44.988 138.719 47.94 135.09 51.57Z`,
  b: `M 43.722 187.78 C 37.908 187.78 32.572 193.885 29.709 196.749 C 26.483 199.974 31.799 208.724 33.632 209.641 C 42.132 213.891 50.35 205.255 53.812 201.794 C 54.83 200.775 62.424 201.896 63.341 202.354 C 71.034 206.201 79.098 205.281 82.96 213.005 C 86.424 219.934 82.129 236.797 80.157 242.713 C 79.524 244.613 79.422 249.053 77.915 250.561 C 76.765 251.71 76.885 254.772 76.233 256.726 C 73.577 264.696 70.425 272.47 67.825 280.269 C 65.112 288.408 58.746 295.283 56.614 303.812 C 54.291 313.104 52.043 324.166 48.206 331.839 C 46.875 334.501 47.565 346.252 48.767 348.655 C 50.466 352.052 49.06 355.967 51.009 359.865 C 55.935 369.717 65.108 376.811 78.475 379.484 C 92.468 382.283 107.205 381.061 121.076 384.529 C 133.279 387.58 148.113 385.65 160.874 385.65 C 164.352 385.65 171.854 387.167 174.888 385.65 C 176.328 384.93 186.877 381.384 182.735 377.242 C 180.861 375.368 174.125 373.162 176.009 369.395 C 177.085 367.243 180.145 364.138 182.175 362.108 C 185.893 358.389 187.93 348.206 190.022 341.928 C 191.771 336.682 191.704 330.709 191.704 325.112 C 191.704 324.04 191.022 319.068 191.704 318.386 C 194.657 315.432 196.543 328.269 197.309 329.036 C 199.145 330.871 197.772 334.445 198.991 336.883 C 201.491 341.884 201.338 349.425 204.036 354.821 C 205.204 357.157 204.09 361.601 205.717 363.229 C 207.738 365.249 206.057 371.416 207.96 373.318 C 210.349 375.708 212.377 379.417 214.686 381.726 C 218.372 385.413 227.354 381.054 232.063 383.408 C 237.412 386.083 247.161 386.211 253.363 386.211 C 255.176 386.211 259.401 386.899 260.65 385.65 C 261.792 384.509 263.752 380.567 264.574 378.924 C 266.686 374.701 261.914 371.362 260.65 368.834 C 257.814 363.161 248.949 361.687 245.516 354.821 C 240.508 344.805 241.982 330.377 237.108 320.628 C 235.741 317.894 236.945 314.299 234.865 312.22 C 234.118 311.472 235.613 308.483 234.865 307.735 C 232.824 305.694 234.29 299.873 232.063 297.646 C 231.459 297.042 232.063 292.955 232.063 292.04 C 232.063 287.732 231.17 279.48 233.744 276.906 C 238.805 271.846 244.304 264.104 251.121 257.287 C 254.972 253.437 258.717 250.967 262.892 248.879 C 266.466 247.092 268.046 242.098 271.3 240.471 C 281.189 235.527 285.905 223.034 290.919 213.005 C 292.714 209.415 290.676 203.401 292.601 199.552 C 294.592 195.569 292.839 190.99 294.283 186.659 C 297.648 176.561 296.525 163 296.525 151.906 C 296.525 147.547 294.115 130.773 297.085 127.803 C 298.578 126.31 300.412 123.355 302.13 121.637 C 303.047 120.72 306.075 121.616 307.175 120.516 C 310.799 116.891 316.092 115.574 318.946 109.865 C 320.408 106.942 319.178 102.675 320.628 99.776 C 321.113 98.806 323.497 87.51 323.431 87.444 C 316.818 80.831 307.906 80.242 297.646 75.112 C 294.248 73.413 285.234 74.552 281.39 74.552 C 280.498 74.552 276.353 75.12 275.785 74.552 C 270.87 69.637 263.782 64.791 258.969 59.978 C 257.934 58.943 254.669 55.681 252.803 56.614 C 252.003 57.014 252.856 59.364 252.242 59.978 C 249.884 62.336 250.483 68.464 248.318 70.628 C 247.46 71.486 248.73 75.261 247.758 76.233 C 244.713 79.278 244.955 85.845 244.955 91.928 C 244.955 93.052 245.713 99.018 244.955 99.776 C 241.872 102.859 242.598 111.217 240.471 115.471 C 237.749 120.914 233.748 125.556 229.821 129.484 C 229.001 130.304 225.854 128.945 224.776 129.484 C 218.252 132.746 209.135 131.139 202.354 134.529 C 191.552 139.93 178.689 138.234 169.283 142.937 C 162.661 146.248 153.634 144.573 148.543 149.664 C 143.646 154.56 140.166 158.009 136.211 165.919 C 132.883 172.575 134.735 186.453 130.045 191.144 C 127.047 194.141 127.836 201.76 125 204.596 C 122.437 207.159 123.211 213.112 120.516 215.807 C 116.034 220.289 114.012 235.994 112.668 242.713 C 111.148 250.314 110.504 260.494 107.063 267.377 C 105.815 269.872 107.135 275.152 105.381 276.906 C 103.864 278.423 105.207 282.86 104.26 284.753 C 100.469 292.335 104.072 310.913 95.852 315.022 C 85.384 320.256 81.278 312.555 81.278 303.251 C 81.278 301.832 80.343 294.657 81.278 293.722 C 85.066 289.934 82.021 277.101 84.641 271.861 C 90.741 259.662 92.39 244.69 96.973 230.942 C 98.41 226.63 102.327 216.425 99.776 211.323 C 96.075 203.921 96.018 195.233 89.686 188.901 C 85.089 184.304 74.446 186.326 68.386 183.296 C 66.358 182.282 50.817 180.124 48.767 182.175 C 48.173 182.769 42.074 187.22 41.48 187.22Z`,
};

const PathTransition = ({tik}) => {
  const svgDomRef = useRef();
  const wrapperRef = useRef();
  const stageDomRef = useRef();
  const pathDomRef = useRef();
  const dimensions = useResizeObserver({ref: wrapperRef});
  const niceMorph = useCallback(({dPath1, dPath2}) => {
    d3.select(pathDomRef.current)
      .transition()
      .delay(300)
      .duration(1000)
      .attrTween('d', function (d) {
        return interpolatePath(dPath1, dPath2);
      })
      .transition()
      .delay(300)
      .duration(1000)
      .attrTween('d', function (d) {
        return interpolatePath(dPath2, dPath1);
      });
  }, []);

  const morph = useCallback(({dPath1, dPath2}) => {
    d3.select(pathDomRef.current)
      .attr('d', dPath1)
      .transition()
      .delay(300)
      .duration(1000)
      .attr('d', dPath2)
      .transition()
      .delay(300)
      .duration(1000)
      .attr('d', dPath1);
  }, []);

  useEffect(() => {
    const {a: dPath1, b: dPath2} = data;
    // morph({dPath1, dPath2});
    niceMorph({dPath1, dPath2});
  }, [tik]);

  return (
    <div ref={wrapperRef}>
      <svg
        ref={svgDomRef}
        className={css`
          display: block;
          border: 1px solid;
          width: ${width}px;
          height: ${height}px;
        `}
      >
        <g ref={stageDomRef}>
          <path
            ref={pathDomRef}
            fill={'none'}
            stroke={'black'}
            strokeWidth={3}
          />
        </g>
      </svg>
    </div>
  );
};

export {PathTransition};
